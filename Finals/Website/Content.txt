Finals

Server-Side Web Scripting

JAVA Servlets
Java objects that are intended to play the role of server components in client-server communications
Handles client request by generating responses to such requests
Part of the JAVA EE Specification (See Java Servlet API for more details…)
Hosted in “servlet container that provides the environment in which the servlet runs, as well as controls the “Servlet Lifecycle” …

Servlet Lifecycle					
Four phases of Servlet Life Cycle:
					
Servlet Class Loading - First phase the a request from the servlet will be received by the container when this happens, the class will be loaded into memory.
				
Servlet Class Initialization – Second phase is the transformation of the normal class into a servlet class and invoke's the init method for the ServletContext object to be intialized by the servlet container.
				
Request Handling – Third phase is the fully functioning website ready to handle client's requests. For every request of the client the service() method is called by initialiazing the request of the client.
				
Removal from Service– Fourth phase all running application will be stop and removing the loaded class from memory using the destroy() method.
					 					
Servlet Life Cycle consists of three methods:
						
public void init(ServletConfig config) – This method is used by container to initialize the servlet, this method is invoked only once in the lifecycle of servlet.
						
public void service (ServletRequest request, ServletResponse response) 		– This method is called once for every request, container can’t invoke service() method until unless init() method is executed.
						
public void destroy() – This method is invoked once when servlet is unloaded from memory

The init() Method
Sample code:

public void init() throws ServletException {
    // load properties from disk, do be used by subsequent doGet() calls
   // Initialization code...
}

The service() Method
Sample code:

public void service(ServletRequest request, ServletResponse response) 
   throws ServletException, IOException {
}

The destroy() Method

Sample code:

public void destroy() {
   // Finalization code...
}

HTTP Servlets
Java service used to handle HTTP Requests and generate (DO GET, DO POST) HTTP responses.
hosted in a web container which is a component in java “application server”. (Apache Tomcat, glass fish, wildfly, oracle web logic etc.)
The doXXX() methods:

HTTP Request    doXXX() method    Description
GET
doGet()
this is a servlet method that is invoke by the server when handling a get request and used to send limited and non-private data.
PUT
doPut()
this is a servlet method that is invoke by the server when the client handles FTP operations
TRACE
doTrace()
this is a servlet method that is invoke by the server when the client wants to debug or trace the headers sent.
DELETE
doDelete()
this is a servlet method that is invoke by the server when the client wants to remove or delete a documentation or content or the whole web page from the server.
OPTIONS
doOptions()
this is a servlet method that is invoke by the server when any request are called by the client.
POST
doPost()
Called by server, via protected service() method to permit a servlet to handle a HTTP POST request.
HEAD
doHead()
Receives a HTTP HEAD request from the protected service() method and handles the request.

The doGet() Method

Sample code:

public void doGet(HttpServletRequest request, HttpServletResponse response)
   throws ServletException, IOException {
   // Servlet code
}

The doPost() Method

Sample code:

public void doPost(HttpServletRequest request, HttpServletResponse response)
   throws ServletException, IOException {
   // Servlet code
}


HTTP Servlet Response 
Message with a possibly payload.
object representation of the HTTP response generated by the servlet.
HTTP representation of HTTP Response generated by the servlet and sent back to requesting client.

HTTP Servlet Request
an interface and can extend the servlet request interface,
object of the HTTP servlet request is created by the servlet container and then passed to the service method (doGet(), doPost() etc) of the servlet.

PHP

HOW TO CONNECT TO THE DATABASE USING PHP

This is an example of a MySqli Procedural 


<?php
	$host = 'localhost'; 
	$user = 'root';
	$pass = '';
	$dbname = 'quiz';
	
	$conn = mysqli_connect($host,$user,$pass,$dbname) or die('Cannot connect to the database');
?>
	The set of code which has the character dollar sign ($) is a used to create a variable that stores a string value that will be inserted into the mysqli_connect method. This is an optional way to connect to the because the mysqli_connect method also accepts direct string values but for formality's sake it is better to create a variable to represent the value of the parameters this will also help the user determine the value of string it is.
The mysqli_connect is the method used in order to connect to the database that is hosted via the wamp server and mySQL. The parameters of mysqli_connect has the following parameters first is the name of the host/server name, second is the username, third is the password then fourth is the database name this parameters are essential but the parameter’s from the first to the third are the basic requirement to connect to the database. 
The die method is used if the connection to the data fails and the message inside the parameter of the die method will be shown. 

How to create a registration form

<?php
include(‘server.php); 
	if (isset($_POST['register'])) { 
		$name = mysqli_real_escape_string($conn, $_POST['name']);
		$userName = mysqli_real_escape_string($conn, $_POST['username']);
		$password = mysqli_real_escape_string($conn, $_POST['password']);
	
	$sql = "INSERT INTO accounts (name, username, password) 
VALUES ('$name', '$userName', '$password')";
	mysqli_query($conn,$sql);
	}
?>

	For the first line of code include(‘server.php’); this is used to import a php file so that repetition of codes will not happen and it is also used to reuse existing code. Server.php contains the code that will connect to the database and contains the variable $conn which is the connection to the database. Second line is if (isset($_POST['register'])) this is a conditional statement that if the button in the html or php file named register is click this condition will be set into true otherwise false. But in the html or php file we need to specify what kind of method to use either it is a POST method or A GET METHOD.
	
POST VS GET this is an HTTP that request-response or it is a communications between a server and a client. A POST method is an HTTP request method that only sends or update data from the server and A POST method is safest HTTP request method when handling sensitive data because it will not have a cache therefore the data of the POST method is safe because the data is posted into the body of the site not into the URL which is not safe. Unlike for the GET method it is the opposite of the POST method where the data being requested is seen into the URL of the website.

Third to Fifth line is the used to store the data inputted by the user into a variable. The mysqli_real_escape_string(); is a method used in order to prevent injections to happen by escaping from any special characters. It has 2 parameters which is the $conn which is the variable stored by the connection of the to the data via the include(‘server.php’); the other one is the  $_POST[‘username’] this the method from the user which has the method POST and the specified name. 
The $sql = "INSERT INTO accounts (name, username, password) is an sql code that inserts data into the database with the header name in the database. VALUES ('$name', '$userName', '$password')"; and for this code is for setting the values of of the SQL method that will be inserted into the accounts table. The mysqli_query($conn,$sql); is used to push the sql code into the database with the parameters  $conn which is the connection to the database and if it’s true then the second parameter $sql will execute just like an sql code.
